// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:skor_id_flutter/model/club_read.dart';
import 'package:skor_id_flutter/generated/json/club_read_helper.dart';
import 'package:skor_id_flutter/model/login.dart';
import 'package:skor_id_flutter/generated/json/login_helper.dart';
import 'package:skor_id_flutter/model/register.dart';
import 'package:skor_id_flutter/generated/json/register_helper.dart';
import 'package:skor_id_flutter/model/league_read.dart';
import 'package:skor_id_flutter/generated/json/league_read_helper.dart';
import 'package:skor_id_flutter/model/country_read.dart';
import 'package:skor_id_flutter/generated/json/country_read_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case ClubRead:
				return clubReadFromJson(data as ClubRead, json) as T;
			case ClubReadData:
				return clubReadDataFromJson(data as ClubReadData, json) as T;
			case ClubReadDataClub:
				return clubReadDataClubFromJson(data as ClubReadDataClub, json) as T;
			case ClubReadDataLeague:
				return clubReadDataLeagueFromJson(data as ClubReadDataLeague, json) as T;
			case ClubReadDataCountry:
				return clubReadDataCountryFromJson(data as ClubReadDataCountry, json) as T;
			case Login:
				return loginFromJson(data as Login, json) as T;
			case LoginData:
				return loginDataFromJson(data as LoginData, json) as T;
			case Register:
				return registerFromJson(data as Register, json) as T;
			case RegisterData:
				return registerDataFromJson(data as RegisterData, json) as T;
			case RegisterDataUser:
				return registerDataUserFromJson(data as RegisterDataUser, json) as T;
			case RegisterDataToken:
				return registerDataTokenFromJson(data as RegisterDataToken, json) as T;
			case LeagueRead:
				return leagueReadFromJson(data as LeagueRead, json) as T;
			case LeagueReadData:
				return leagueReadDataFromJson(data as LeagueReadData, json) as T;
			case LeagueReadDataLeague:
				return leagueReadDataLeagueFromJson(data as LeagueReadDataLeague, json) as T;
			case LeagueReadDataCountry:
				return leagueReadDataCountryFromJson(data as LeagueReadDataCountry, json) as T;
			case LeagueReadDataClub:
				return leagueReadDataClubFromJson(data as LeagueReadDataClub, json) as T;
			case CountryRead:
				return countryReadFromJson(data as CountryRead, json) as T;
			case CountryReadData:
				return countryReadDataFromJson(data as CountryReadData, json) as T;
			case CountryReadDataCountry:
				return countryReadDataCountryFromJson(data as CountryReadDataCountry, json) as T;
			case CountryReadDataLeague:
				return countryReadDataLeagueFromJson(data as CountryReadDataLeague, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case ClubRead:
				return clubReadToJson(data as ClubRead);
			case ClubReadData:
				return clubReadDataToJson(data as ClubReadData);
			case ClubReadDataClub:
				return clubReadDataClubToJson(data as ClubReadDataClub);
			case ClubReadDataLeague:
				return clubReadDataLeagueToJson(data as ClubReadDataLeague);
			case ClubReadDataCountry:
				return clubReadDataCountryToJson(data as ClubReadDataCountry);
			case Login:
				return loginToJson(data as Login);
			case LoginData:
				return loginDataToJson(data as LoginData);
			case Register:
				return registerToJson(data as Register);
			case RegisterData:
				return registerDataToJson(data as RegisterData);
			case RegisterDataUser:
				return registerDataUserToJson(data as RegisterDataUser);
			case RegisterDataToken:
				return registerDataTokenToJson(data as RegisterDataToken);
			case LeagueRead:
				return leagueReadToJson(data as LeagueRead);
			case LeagueReadData:
				return leagueReadDataToJson(data as LeagueReadData);
			case LeagueReadDataLeague:
				return leagueReadDataLeagueToJson(data as LeagueReadDataLeague);
			case LeagueReadDataCountry:
				return leagueReadDataCountryToJson(data as LeagueReadDataCountry);
			case LeagueReadDataClub:
				return leagueReadDataClubToJson(data as LeagueReadDataClub);
			case CountryRead:
				return countryReadToJson(data as CountryRead);
			case CountryReadData:
				return countryReadDataToJson(data as CountryReadData);
			case CountryReadDataCountry:
				return countryReadDataCountryToJson(data as CountryReadDataCountry);
			case CountryReadDataLeague:
				return countryReadDataLeagueToJson(data as CountryReadDataLeague);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (ClubRead).toString()){
			return ClubRead().fromJson(json);
		}	else if(type == (ClubReadData).toString()){
			return ClubReadData().fromJson(json);
		}	else if(type == (ClubReadDataClub).toString()){
			return ClubReadDataClub().fromJson(json);
		}	else if(type == (ClubReadDataLeague).toString()){
			return ClubReadDataLeague().fromJson(json);
		}	else if(type == (ClubReadDataCountry).toString()){
			return ClubReadDataCountry().fromJson(json);
		}	else if(type == (Login).toString()){
			return Login().fromJson(json);
		}	else if(type == (LoginData).toString()){
			return LoginData().fromJson(json);
		}	else if(type == (Register).toString()){
			return Register().fromJson(json);
		}	else if(type == (RegisterData).toString()){
			return RegisterData().fromJson(json);
		}	else if(type == (RegisterDataUser).toString()){
			return RegisterDataUser().fromJson(json);
		}	else if(type == (RegisterDataToken).toString()){
			return RegisterDataToken().fromJson(json);
		}	else if(type == (LeagueRead).toString()){
			return LeagueRead().fromJson(json);
		}	else if(type == (LeagueReadData).toString()){
			return LeagueReadData().fromJson(json);
		}	else if(type == (LeagueReadDataLeague).toString()){
			return LeagueReadDataLeague().fromJson(json);
		}	else if(type == (LeagueReadDataCountry).toString()){
			return LeagueReadDataCountry().fromJson(json);
		}	else if(type == (LeagueReadDataClub).toString()){
			return LeagueReadDataClub().fromJson(json);
		}	else if(type == (CountryRead).toString()){
			return CountryRead().fromJson(json);
		}	else if(type == (CountryReadData).toString()){
			return CountryReadData().fromJson(json);
		}	else if(type == (CountryReadDataCountry).toString()){
			return CountryReadDataCountry().fromJson(json);
		}	else if(type == (CountryReadDataLeague).toString()){
			return CountryReadDataLeague().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<ClubRead>[] is M){
			return data.map<ClubRead>((e) => ClubRead().fromJson(e)).toList() as M;
		}	else if(<ClubReadData>[] is M){
			return data.map<ClubReadData>((e) => ClubReadData().fromJson(e)).toList() as M;
		}	else if(<ClubReadDataClub>[] is M){
			return data.map<ClubReadDataClub>((e) => ClubReadDataClub().fromJson(e)).toList() as M;
		}	else if(<ClubReadDataLeague>[] is M){
			return data.map<ClubReadDataLeague>((e) => ClubReadDataLeague().fromJson(e)).toList() as M;
		}	else if(<ClubReadDataCountry>[] is M){
			return data.map<ClubReadDataCountry>((e) => ClubReadDataCountry().fromJson(e)).toList() as M;
		}	else if(<Login>[] is M){
			return data.map<Login>((e) => Login().fromJson(e)).toList() as M;
		}	else if(<LoginData>[] is M){
			return data.map<LoginData>((e) => LoginData().fromJson(e)).toList() as M;
		}	else if(<Register>[] is M){
			return data.map<Register>((e) => Register().fromJson(e)).toList() as M;
		}	else if(<RegisterData>[] is M){
			return data.map<RegisterData>((e) => RegisterData().fromJson(e)).toList() as M;
		}	else if(<RegisterDataUser>[] is M){
			return data.map<RegisterDataUser>((e) => RegisterDataUser().fromJson(e)).toList() as M;
		}	else if(<RegisterDataToken>[] is M){
			return data.map<RegisterDataToken>((e) => RegisterDataToken().fromJson(e)).toList() as M;
		}	else if(<LeagueRead>[] is M){
			return data.map<LeagueRead>((e) => LeagueRead().fromJson(e)).toList() as M;
		}	else if(<LeagueReadData>[] is M){
			return data.map<LeagueReadData>((e) => LeagueReadData().fromJson(e)).toList() as M;
		}	else if(<LeagueReadDataLeague>[] is M){
			return data.map<LeagueReadDataLeague>((e) => LeagueReadDataLeague().fromJson(e)).toList() as M;
		}	else if(<LeagueReadDataCountry>[] is M){
			return data.map<LeagueReadDataCountry>((e) => LeagueReadDataCountry().fromJson(e)).toList() as M;
		}	else if(<LeagueReadDataClub>[] is M){
			return data.map<LeagueReadDataClub>((e) => LeagueReadDataClub().fromJson(e)).toList() as M;
		}	else if(<CountryRead>[] is M){
			return data.map<CountryRead>((e) => CountryRead().fromJson(e)).toList() as M;
		}	else if(<CountryReadData>[] is M){
			return data.map<CountryReadData>((e) => CountryReadData().fromJson(e)).toList() as M;
		}	else if(<CountryReadDataCountry>[] is M){
			return data.map<CountryReadDataCountry>((e) => CountryReadDataCountry().fromJson(e)).toList() as M;
		}	else if(<CountryReadDataLeague>[] is M){
			return data.map<CountryReadDataLeague>((e) => CountryReadDataLeague().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}